generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int     @id @default(autoincrement())
  userId             Int     @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  userId       Int      @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id             Int           @id @default(autoincrement())
  name           String?
  email          String?       @unique
  emailVerified  DateTime?     @map("email_verified")
  image          String?
  createdAt      DateTime      @default(now()) @map(name: "created_at")
  updatedAt      DateTime      @updatedAt @map(name: "updated_at")
  accounts       Account[]
  sessions       Session[]
  applications   Application[]
  groups         Group[]
  groupId        Int?
  yearOfStudy    Int?
  major          String?
  specialisation String?
  linkedinUrl    String?
  gitHubUrl      String?

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Question {
  id             Int    @id @default(autoincrement())
  questionString String

  form    Form     @relation(fields: [formId], references: [id])
  formId  Int
  answers Answer[]
}

model Answer {
  id             Int @id @default(autoincrement())
  answerResponse Int

  application Application @relation(fields: [applicationId], references: [id])
  question    Question    @relation(fields: [questionId], references: [id])

  applicationId Int
  questionId    Int
}

model Form {
  id Int @id @default(autoincrement())

  group   Group @relation(fields: [groupId], references: [id])
  groupId Int   @unique

  questions    Question[]
  applications Application[]
}

model Application {
  id         Int      @id @default(autoincrement())
  isApproved Boolean?

  form      Form     @relation(fields: [formId], references: [id])
  applicant User     @relation(fields: [userId], references: [id])
  answers   Answer[]

  formId  Int
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int
}

model Group {
  id           Int      @id @default(autoincrement())
  name         String
  currentSize  Int      @default(1)
  targetSize   Int
  description  String?
  targetSkills String[]

  members       User[]
  form          Form?
  applications  Application[]
  competition   Competition   @relation(fields: [competitionId], references: [id])
  competitionId Int
}

model Competition {
  id            Int      @id @default(autoincrement())
  name          String
  deadline      DateTime
  organiserName String
  description   String
  link          String
  maxSize       Int
  minSize       Int
  groups        Group[]
}
